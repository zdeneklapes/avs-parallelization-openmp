Architektury Výpočetních Systémů (AVS 2023)
Projekt č. 2 (PMC)
Login: xlapes02

Úloha 1: Paralelizace původního řešení
===============================================================================

1) Kterou ze smyček (viz zadání) je vhodnější paralelizovat a co způsobuje 
   neefektivitu paralelizaci té druhé?

Vhodnější je paralelizovat smyčku v metodě LoopMeshBuilder::marchCubes, protože se jedná o smyčku na nejvyšší úrovni. Neefektivitu druhé smyčky způsobuje opakované volání metody LoopMeshBuilder::evaluateFieldAt, což vede k neustálému vytváření a následnému zrušení velkého počtu vláken.

2) Jaké plánování (rozdělení práce mezi vlákna) jste zvolili a proč? 
   Jaký vliv má velikost "chunk" při dynamickém plánování (8, 16, 32, 64)?

Při testování a měření všech tří způsobů plánování (statické, dynamické a řízené), i s různými velikostmi "chunk" (1, 8, 16, 32, 64), jsem nezaznamenal žádný výrazný rozdíl ve výkonu. Zvolil jsem tedy dynamické plánování 'dynamic', protože provedení iterací obecně trvá různě dlouho. Tímto bude zajištěno vyvážení zátěže. Pro velikost "chunk" jsem zvolil hodnotu 32, abych snížil synchronizační režii za běhu.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?

Pomocí #pragma omp critical v metodě LoopMeshBuilder::emitTriangle. Při ukládání z více vláken může dojít k vzájemnému vyloučení, a proto je tato pragma velmi důležitá k synchronizaci vláken při přístupu do kritické sekce.


Úloha 2: Paralelní průchod stromem
===============================================================================

1) Stručně popište použití OpenMP tasků ve vašem řešení.

Použití #pragma v metodě TreeMeshBuilder::marchCubes umožňuje paralelní vykonávání výpočtu a vytváření paralelních tasků:
#pragma omp parallel default(none) shared(totalTriangles, field)

Pro první průchod a vytvoření tasků do fronty je potřeba provést pouze jedním vláknem, což je dosaženo pomocí:
#pragma omp master

V metodě TreeMeshBuilder::decomposeCube jsem pro zajištění toho, že pouze jedno vlákno bude přistupovat k proměnné 'totalTriangles' ve stejný čas, použil:
#pragma omp atomic update

Na konci metody TreeMeshBuilder::decomposeCube() je potřeba synchronizovat všechna child vlákna, což je zajištěno pomocí:
#pragma omp taskwait


2) Jaký vliv má na vaše řešení tzv. "cut-off"? Je vhodné vytvářet nový 
   task pro každou krychli na nejnižší úrovni?

Maximální délka hrany krychle na nejnižší úrovni byla zvolena jako 1. Pokud by hodnota cut-off byla větší než 1, došlo by k nepřesnému výpočtu, protože nebyly by vytvořeny všechny trojúhelníky. Na nejnižší úrovni již není vhodné vytvářet nový úkol (task), protože vše, co je potřeba, je získat součty trojúhelníků jednotlivých krychlí na této úrovni. Stejně tak funguje i varianta s cyklem, která projde všechny krychle na nejnižší úrovni a sečte jejich trojúhelníky.

Vytváření nového úkolu pro každou krychli na nejnižší úrovni je velmi nevhodné, protože v tomto bodě již není potřeba dalšího dělení prostoru na další podsektory, a dochází pouze k generování trojúhelníků pomocí funkce "buildCube".

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?

Stejně jako v případě loop varianty, využívám #pragma omp critical v metodě TreeMeshBuilder::emitTriangle, aby nedocházelo k vzájemnému vyloučení při ukládání. Avšak nyní, vzhledem k rekurzivnímu výpočtu, je třeba synchronizovat i výpočet v jednotlivých child vláknech.

Mohou nastat tři situace:
1. Když je krychle prázdná, funkce vrátí 0.
2. Když byla dosažena specifikovaná hloubka cut-off, funkce vrátí celkový počet trojúhelníků zavolaným způsobem v metodě buildCube.
3. Když je krychle neprázdná a nedošlo k dosažení cut-off hloubky, do sdílené proměnné totalTrianglesCount se přičítají počty trojúhelníků rekurzivním voláním funkce TreeMeshBuilder::decomposeCube na nižších úrovních jednotlivých child vláken.

Pro správný součet všech počtů všech child vláken je nutné přidat #pragma omp taskwait pro čekání na dokončení child tasků, které byly vygenerovány jejich rodičovským taskem.


Úloha 3: Grafy škálování všech řešení
===============================================================================

1) Stručně zhodnoťte efektivitu vytvořených řešení (na základě grafů ŠKÁLOVÁNÍ).

Při použití větší mřížky se ukázalo, že řešení pomocí algoritmu octree je efektivnější. Loop varianta byla buď srovnatelná nebo trošku efektivnější než tree varianta při menších velikostech mřížky. Z grafu silného škálování je patrné, že v tree přístupu dochází při větším počtu vláken k stabilizaci času výpočtu pro většinu velikostí vstupu. Naopak v loop přístupu dochází k rapidnímu poklesu času výpočtu s přidáváním více výpočetních zdrojů, což naznačuje efektivní silné škálování v tomto případě.


2) V jakém případě (v závislosti na počtu bodů ve vstupním souboru a velikosti 
   mřížky) bude vaše řešení 1. úlohy neefektivní? (pokud takový případ existuje)

Podle grafu škálování by k takovému případu došlo při malém vstupu ale použitých bude hodně vláken.

3) Je (nebo není) stromový algoritmus efektivnější z pohledu slabého škálování 
   vzhledem ke vstupu?

Stromový algoritmus není efektivní z hlediska slabého škálování vzhledem ke vstupu. Algoritmus má problém se škálováním při zvětšování vstupu.

4) Jaký je rozdíl mezi silným a slabým škálováním?

Při silném škálování zůstává celkové množství práce (počet úkolů) konstantní, pričemž cílem je zvládnout tento problém v co nejkratším čase a pocet procesorů je variabilní.

Při slabém škálování zůstává množství práce na každém výpočtovém jádru konstantní. S nárůstem počtu výpočtových zdrojů zůstává čas potřebný k vyřešení problému konstantní, přičemž cílem je zvládnout co největší problém za zachování tohoto konstantního času.

Úloha 4: Analýza využití jader pomocí VTune
================================================================================

1) Jaké bylo průměrné využití jader pro všechny tři implementace s omezením na 
   18 vláken? Na kolik procent byly využity?
   
   ref: 2.8% (0.998 out of 36 logical cores)
   loop: 48.4% (17.439 out of 36 logical cores)
   tree: 42.7% (15.358 out of 36 logical cores)

2) Jaké bylo průměrné využití jader pro všechny tři implementace s využitím 
   všech jader? Na kolik procent se podařilo využít obě CPU?
   
   ref: 2.8% (0.998 out of 36 logical cores)
   loop: 90.0% (32.400 out of 36 logical CPUs)
   tree: 73.5% (26.472 out of 36 logical CPUs)

3) Jaké jsou závěry z těchto měření?

Z měření vyplývá, že pro malý počet vláken je varianta algoritmu Marching Cubes implementovaná pomocí smyčky (loop) trochu efektivnější než varianta s použitím stromu (tree). Nicméně pro větší počet vláken je smyčka značně efektivnější než strom. Tento rozdíl lze přičítat dělení a vytváření jednotlivých úkolů, stejně jako rekurzivitě samotné, která se nachází v metodě TreeMeshBuilder::decomposeCube.
